name: Auto Release

on:
  push:
    branches: [master, main]
    paths:
      - 'late/**'
      - 'credentials/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - '**.ts'
      - '**.js'
      - '**.json'
      - '!.github/**'
      - '!**.md'
      - '!.gitignore'
      - '!.eslintrc.js'
      - '!.eslintignore'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  packages: write
  issues: write

jobs:
  auto-release:
    runs-on: ubuntu-latest

    # Solo ejecutar si hay commits que no sean merges automáticos
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check release relevance (for manual dispatch)
        if: github.event_name == 'workflow_dispatch'
        id: release_relevance
        uses: ./.github/actions/check-release-relevance
        with:
          base-ref: 'origin/master'
          head-ref: 'HEAD'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version increment type
        id: version_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            echo "Manual trigger: Using $VERSION_TYPE"
          else
            # Analizar commits desde el último tag para determinar el tipo de versión
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
            if [ -z "$LAST_TAG" ]; then
              echo "No previous tag found, using patch"
              VERSION_TYPE="patch"
            else
              echo "Last tag: $LAST_TAG"
          
              # Obtener commits desde el último tag
              COMMITS=$(git log $LAST_TAG..HEAD --oneline)
              echo "Commits since last tag:"
              echo "$COMMITS"
          
              # Determinar tipo de versión basado en conventional commits
              if echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.+\))?!:"; then
                VERSION_TYPE="major"
                echo "Found breaking feature, using major"
              elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ .+!:"; then
                VERSION_TYPE="major" 
                echo "Found breaking change, using major"
              elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ (feat|feature)(\(.+\))?:"; then
                VERSION_TYPE="minor"
                echo "Found feature, using minor"
              else
                VERSION_TYPE="patch"
                echo "No major/minor changes found, using patch"
              fi
            fi
          fi
          
          echo "increment_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "Version increment type: $VERSION_TYPE"

      - name: Run tests and linting
        run: |
          echo "Running linting..."
          npm run lint
          echo "Building project..."
          npm run build

      - name: Increment version
        id: new_version
        run: |
          VERSION_TYPE="${{ steps.version_type.outputs.increment_type }}"
          echo "Incrementing version by: $VERSION_TYPE"
          
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#v} # Remove 'v' prefix
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update changelog
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          TODAY=$(date +"%Y-%m-%d")
          
          # Crear o actualizar CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Preparar entrada del changelog
          TEMP_CHANGELOG=$(mktemp)
          echo "# Changelog" > $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "## [${NEW_VERSION}] - ${TODAY}" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          # Obtener commits desde el último tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Changes" >> $TEMP_CHANGELOG
            git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s" >> $TEMP_CHANGELOG
          else
            echo "### Changes" >> $TEMP_CHANGELOG
            echo "- Initial release" >> $TEMP_CHANGELOG
          fi
          
          echo "" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          
          # Agregar changelog existente (saltando la primera línea)
          if [ -f CHANGELOG.md ]; then
            tail -n +2 CHANGELOG.md >> $TEMP_CHANGELOG
          fi
          
          mv $TEMP_CHANGELOG CHANGELOG.md

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: bump version to ${NEW_VERSION}
          
          Auto-generated version bump:
          - Version: ${NEW_VERSION}
          - Type: ${{ steps.version_type.outputs.increment_type }}
          - Triggered by: ${{ github.event_name }}"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          TAG_NAME="v${NEW_VERSION}"
          
          echo "Creating tag: $TAG_NAME"
          git tag -a $TAG_NAME -m "Release ${NEW_VERSION}
          
          Auto-generated release:
          - Version: ${NEW_VERSION}
          - Type: ${{ steps.version_type.outputs.increment_type }}
          - Commit: ${{ github.sha }}"
          
          echo "Pushing changes and tag..."
          git push origin ${{ github.ref_name }}  # ← Use current branch name instead of hardcoded 'master'
          git push origin $TAG_NAME

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const newVersion = '${{ steps.new_version.outputs.new_version }}';
            const tagName = `v${newVersion}`;
            const versionType = '${{ steps.version_type.outputs.increment_type }}';
            
            // Leer changelog para esta versión
            let changelogContent = '';
            try {
              const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
              const lines = changelog.split('\n');
              let capturing = false;
              let capturedLines = [];
            
              for (const line of lines) {
                if (line.startsWith(`## [${newVersion}]`)) {
                  capturing = true;
                  continue;
                }
                if (capturing && line.startsWith('## [')) {
                  break;
                }
                if (capturing && line.trim()) {
                  capturedLines.push(line);
                }
              }
            
              changelogContent = capturedLines.join('\n').trim();
            } catch (error) {
              console.log('Could not read changelog:', error.message);
            }
            
            const releaseNotes = `## 🚀 Release ${newVersion}

            ${changelogContent || 'Auto-generated release'}

            ### Installation
            \`\`\`bash
            npm install n8n-nodes-late@${newVersion}
            \`\`\`

            Or install via n8n Community Nodes panel.

            ---

            **Release Type:** ${versionType}
            **Auto-generated:** This release was automatically created from commits to master branch.

            This release will be automatically published to NPM via GitHub Actions.`;

            try {
              const { data: release } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${newVersion}`,
                body: releaseNotes,
                draft: false,
                prerelease: false
              });
              
              console.log(`✅ Created release: ${release.html_url}`);
              console.log(`Release ID: ${release.id}`);
              
              // Wait a moment for GitHub to process the release
              await new Promise(resolve => setTimeout(resolve, 3000));
              
              // Verify the release was created and is published
              try {
                const { data: verifyRelease } = await github.rest.repos.getRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                console.log(`Release status: draft=${verifyRelease.draft}, prerelease=${verifyRelease.prerelease}`);
                console.log(`Published at: ${verifyRelease.published_at}`);
                console.log(`✅ Release ${newVersion} verified - NPM publication should be triggered`);
              } catch (verifyError) {
                console.log(`⚠️  Could not verify release status: ${verifyError.message}`);
                console.log('Release was created but verification failed - this is usually not a problem');
              }
              
            } catch (createError) {
              console.log(`❌ Failed to create release: ${createError.message}`);
              
              // Check if it's because the release already exists
              if (createError.message && createError.message.includes('already_exists')) {
                console.log('Release may already exist - checking...');
                try {
                  const { data: existingRelease } = await github.rest.repos.getReleaseByTag({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag: tagName
                  });
                  console.log(`Found existing release: ${existingRelease.html_url}`);
                  console.log('✅ Release exists - NPM publication should still be triggered');
                } catch (checkError) {
                  console.log(`Could not check for existing release: ${checkError.message}`);
                  throw createError; // Re-throw original error
                }
              } else {
                throw createError; // Re-throw for other errors
              }
            }

      - name: Trigger NPM Publication Workflow
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newVersion = '${{ steps.new_version.outputs.new_version }}';
            const tagName = `v${newVersion}`;
            
            console.log('🚀 Triggering NPM publication workflow as backup...');
            console.log(`Version: ${newVersion}, Tag: ${tagName}`);
            
            // Wait a bit more to ensure the release event has been processed
            console.log('⏳ Waiting 5 seconds for release event to propagate...');
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'publish.yml',
                ref: 'master',
                inputs: {
                  version: 'current'
                }
              });
              
              console.log('✅ NPM publication workflow triggered successfully via workflow_dispatch');
            } catch (error) {
              console.log(`⚠️  Could not trigger NPM workflow manually: ${error.message}`);
              console.log('This is usually fine - the release event should trigger it automatically');
              
              // Check if the workflow file exists
              try {
                await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: '.github/workflows/publish.yml'
                });
                console.log('✅ publish.yml workflow file exists');
              } catch (fileError) {
                console.log('❌ publish.yml workflow file not found!');
              }
            }
            
            console.log('');
            console.log('📋 NPM Publication Status:');
            console.log('- Release event trigger: Automatic (when release is published)');
            console.log('- Manual trigger: Attempted as backup');
            console.log('- Monitor at: https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions');
            console.log('');
            console.log('If NPM publication does not start within 2-3 minutes:');
            console.log('1. Check GitHub Actions tab for any workflow runs');
            console.log('2. Manually trigger "Publish to NPM" workflow');
            console.log('3. Verify NPM_TOKEN secret is configured correctly');

      - name: Summary
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          VERSION_TYPE="${{ steps.version_type.outputs.increment_type }}"
          
          echo "## 🎉 Auto-Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Type:** ${VERSION_TYPE}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created:** v${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release:** [View Release](https://github.com/${{ github.repository }}/releases/tag/v${NEW_VERSION})" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Publication:** Triggered automatically + manual backup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Version bumped and committed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Tag created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub release created" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 NPM publication workflow triggered (release event + manual dispatch)" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Monitor: [Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Verify: [NPM Package](https://www.npmjs.com/package/n8n-nodes-late)" >> $GITHUB_STEP_SUMMARY
